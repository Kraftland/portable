#!/usr/bin/bash

function waitForStart() {
	inotifywait \
		-e modify \
		--quiet \
		/run/startSignal 1>/dev/null
}

function startLoop() {
	while true; do
		inotifywait \
			-e modify \
			--quiet \
			/run/startSignal 1>/dev/null
		systemd-notify --reloading
		_launch="$(cat /run/startSignal)"
		if [[ ${_launch} =~ terminate ]]; then
			break
		elif [[ ${_launch} = finish ]]; then
			echo "Finished Start"
		else
			echo "Starting auxiliary application"
			$(cat /run/startSignal) &
			systemd-notify --ready
			systemd-notify --status="Started auxiliary Application"
		fi
	done
}

function stopApp() {
	echo "terminate-now" >/run/startSignal
	return $?
}

echo "app-started" >/run/startSignal

startLoop &
waitForStart

systemd-notify --ready &
systemd-notify --status="Sandbox startup complete" &

cmd=$1
shift
"$cmd" "$@"

if [[ $(ps aux | wc -l) -le 7 ]]; then
	echo "No more application running, terminating..."
	#kill %1
	echo terminate-now >/run/startSignal
	exit 0
else
	echo "Warning! There're still processes running in the background."
	systemd-notify --status="Main application exited"
	_state=$(notify-send --expire-time=20000 --wait --action="kill"="Terminate" --action="ignore"="Dismiss" "Application running in background!" "Terminate as required")
	if [[ ${_state} = "kill" ]]; then
		systemd-notify --stopping
		echo "User opted to kill processes"
		stopApp
	else
		systemd-notify --status="User denied termination, staying in background indefinitely..."
		echo "User denied termination, staying in background indefinitely..."
		while true; do
			sleep 3650d
		done
	fi
fi
