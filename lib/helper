#!/usr/bin/bash

function waitForStart() {
	while ! grep -q finish /run/startSignal; do
		inotifywait \
			-e modify \
			--quiet \
			/run/startSignal 1>/dev/null
	done
}

function startLoop() {
	while true; do
		inotifywait \
			-e modify \
			--quiet \
			/run/startSignal 1>/dev/null
		local _launch="$(cat /run/startSignal)"
		if [[ ${_launch} =~ terminate ]]; then
			break
		elif [[ ${_launch} = finish ]]; then
			continue
		else
			echo "Starting auxiliary application"
			$(cat /run/startSignal) &
			systemd-notify --ready
			systemd-notify --status="Started auxiliary Application"
		fi
	done
}

function stopApp() {
	echo "terminate-now" >/run/startSignal
	return $?
}

function askStop() {
	if [[ "${LANG}" =~ "zh_CN" ]]; then
		/usr/bin/zenity \
			--title "${friendlyName}" \
			--icon=background-app-ghost-symbolic \
			--question \
			--text="主程序已退出, 停止沙盒?"
	else
		/usr/bin/zenity \
			--title "${friendlyName}" \
			--icon=background-app-ghost-symbolic \
			--question \
			--text="Main process terminated, stop sandbox?"
	fi
	if [[ $? -eq 0 ]]; then
		systemd-notify --stopping
		echo "User opted to kill processes"
		stopApp
	else
		systemd-notify --status="User denied session termination"
	fi
}

echo "app-started" >/run/startSignal

startLoop &
#waitForStart

systemd-notify --ready &
systemd-notify --status="Sandbox startup complete" &

cmd=$1
shift
"$cmd" "$@"

#sleep 1s
_procCnt=$(ps | grep -v zenity | wc -l)
echo "Process count: ${_procCnt}"
if [[ "${_procCnt}" -le 8 ]]; then
	echo "No more application running, terminating..."
	#kill %1
	echo terminate-now >/run/startSignal
	exit 0
else
	echo "Warning! There're still processes running in the background."
	systemd-notify --status="Main application exited"
	echo "Staying in background until all process terminates"
	askStop &
	while true; do
		sleep 5s
		_procCnt=$(ps | grep -v zenity | wc -l)
		#echo "Process count: ${_procCnt}"
		if [[ "${_procCnt}" -le 9 ]]; then
			echo "Terminating sandbox..."
			stopApp
			break
		fi
	done
fi
